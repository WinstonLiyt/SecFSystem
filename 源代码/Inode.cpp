#include "Inode.h"
#include "FileSystem.h"
#include "Utility.h"
#include "DeviceDriver.h"
#include "User.h"
#include "Kernel.h"

/* 内存打开 i节点*/
Inode::Inode()
{
	/* 清空Inode对象中的数据 */
	// this->Clean(); 
	/* 去除this->Clean();的理由：
	 * Inode::Clean()特定用于IAlloc()中清空新分配DiskInode的原有数据，
	 * 即旧文件信息。Clean()函数中不应当清除i_dev, i_number, i_flag, i_count,
	 * 这是属于内存Inode而非DiskInode包含的旧文件信息，而Inode类构造函数需要
	 * 将其初始化为无效值。
	 */
	 /* 将Inode对象的成员变量初始化为无效值 */
	this->i_flag = 0;
	this->i_mode = 0;
	this->i_count = 0;
	this->i_nlink = 0;
	this->i_number = -1;
	this->i_uid = -1;
	this->i_gid = -1;
	this->i_size = 0;
	this->i_lastr = -1;
	for (int i = 0; i < 10; i++)
		this->i_addr[i] = 0;
}

Inode::~Inode()
{
	//nothing to do here
}

/* 根据inode对象中的物理磁盘块索引表，读取相应文件数据，不是读到Inode中，而是读到 u.u_IOParam.m_Base中 */
/* 从磁盘读取特定文件的数据到用户指定的内存区域。 */
void Inode::ReadI()
{
	int lbn;	/* 文件逻辑块号 */
	int bn;		/* lbn对应的物理盘块号 */
	int offset;	/* 当前字符块内起始传送位置 */
	int nbytes;	/* 传送至用户目标区字节数量 */
	short dev;	/* 设备号 */
	Buf* pBuf;	/* 缓存指针 */
	User& u = Kernel::Instance().GetUser();
	BufferManager& bufMgr = Kernel::Instance().GetBufferManager();
	DeviceDriver& devMgr = Kernel::Instance().GetDeviceDriver();

	if (0 == u.u_IOParam.m_Count)
	{
		/* 需要读字节数为零，则返回 */
		return;
	}
	this->i_flag |= Inode::IACC;  // 设置访问标志，写回时需要修改访问时间
	if (u.u_error != User::noerror)
	{
		//cout << "在ReadI的时候，u_error异常，请注意检查" << endl;
	}

	/* 一次一个字符块地读入所需全部数据，直至遇到文件尾 */
	while (User::noerror == u.u_error && u.u_IOParam.m_Count != 0)
	{
		/* 计算当前字符块在文件中的逻辑块号 lbn，以及在字符块中的起始位置 offset */
		lbn = bn = u.u_IOParam.m_Offset / BLOCK_SIZE;
		offset = u.u_IOParam.m_Offset % BLOCK_SIZE;
		/* 传送到用户区的字节数量，取读请求的剩余字节数与当前字符块内有效字节数较小值 */
		nbytes =min(BLOCK_SIZE - offset /* 块内有效字节数 */, u.u_IOParam.m_Count);
		
		int remain = this->i_size - u.u_IOParam.m_Offset;
		/* 如果已读到超过文件结尾 */
		if (remain <= 0)
		{
			return;
		}
		/* 传送的字节数量还取决于剩余文件的长度 */
		nbytes = min(nbytes, remain);

		/* 将逻辑块号lbn转换成物理盘块号bn ，Bmap有设置Inode::rablock。当UNIX认为获取预读块的开销太大时，
		 * 会放弃预读，此时 Inode::rablock 值为 0。
		 * */
		if ((bn = this->Bmap(lbn)) == 0)
		{
			return;
		}

		pBuf = bufMgr.Bread(bn);
		unsigned char* start = pBuf->b_addr + offset;  /* 缓存中数据起始读位置 */

		memcpy(u.u_IOParam.m_Base, start, nbytes);
		u.u_IOParam.m_Base += nbytes;	/* 更新用户目标 */
		u.u_IOParam.m_Offset += nbytes;	/* 更新读写位置 */
		u.u_IOParam.m_Count -= nbytes;	/* 更新剩余字节数 */

		bufMgr.Brelse(pBuf);	/* 使用完缓存，释放该资源 */
	}
}

/* 根据Inode对象中的物理磁盘块索引表，将数据写入文件 */
void Inode::WriteI()
{
	int lbn;	/* 文件逻辑块号 */
	int bn;		/* lbn对应的物理盘块号 */
	int offset;	/* 当前字符块内起始传送位置 */
	int nbytes;	/* 传送字节数量 */
	short dev;	/* 设备号 */
	Buf* pBuf;	/* 缓存指针 */
	User& u = Kernel::Instance().GetUser();
	BufferManager& bufMgr = Kernel::Instance().GetBufferManager();
	DeviceDriver& devMgr = Kernel::Instance().GetDeviceDriver();

	/* 设置Inode被访问标志位 */
	this->i_flag |= (Inode::IACC | Inode::IUPD);

	if (0 == u.u_IOParam.m_Count)
	{
		/* 需要读字节数为零，则返回 */
		return;
	}

	/* 只要没有错误发生并且用户还有数据要写入，循环就会继续 */
	while (User::noerror == u.u_error && u.u_IOParam.m_Count != 0)
	{
		/* 计算当前地址的逻辑块号（lbn）和在该地址中的起始位置（offset）。然后，计算要传输的字节数（nbytes），
		   这是当前块剩余大小和用户要写入的大小之间的较小值 */
		/* 计算当前字符块的逻辑块号lbn，以及在该字符块中的起始传送位置offset */
		/* 逻辑块号是相对于当前的Inode的，从0开始 */
		/* 物理块号就是我们的磁盘 */
		/* 逻辑块号转物理块号其实就是去this_addr中找对应的数组值 */
		lbn = u.u_IOParam.m_Offset / BLOCK_SIZE;		// 第几块（逻辑块号）
		offset = u.u_IOParam.m_Offset % BLOCK_SIZE;		// 块中偏移量
		/* 计算传送字节数量nbytes,是该块中剩余大小与用户要求传送的大小的较小值 */
		nbytes = min(BLOCK_SIZE - offset, u.u_IOParam.m_Count);

		/* 逻辑块号转物理块号 */
		if ((bn = this->Bmap(lbn)) == 0)
		{
			return;
		}

		if (BLOCK_SIZE == nbytes)
		{
			/* 如果写入数据正好满一个字符块，则为其分配缓存 */
			pBuf = bufMgr.GetBlk(bn);
		}
		else
		{
			/* 写入数据不满一个字符块，【先读后写】（读出该字符块以保护不需要重写的数据） */
			pBuf = bufMgr.Bread(bn);
		}

		/* 缓存中数据的起始写位置 */
		unsigned char* start = pBuf->b_addr + offset;

		/* 写操作: 从用户目标区拷贝数据到缓冲区 */
		memcpy(start, u.u_IOParam.m_Base, nbytes);

		/* 用传送字节数nbytes更新读写位置 */
		u.u_IOParam.m_Base += nbytes;	/* 更新用户目标区 */
		u.u_IOParam.m_Offset += nbytes;	/* 更新读写位置 */
		u.u_IOParam.m_Count -= nbytes;	/* 更新剩余字节数 */

		if (u.u_error != User::noerror)	/* 写过程中出错 */
		{
			bufMgr.Brelse(pBuf);	/* 释放缓存 */
		}
		else if ((u.u_IOParam.m_Offset % BLOCK_SIZE) == 0)	/* 如果写满一个字符块 */
		{
			/* 以异步方式将字符块写入磁盘，进程不需等待I/O操作结束，可以继续往下执行 */
			bufMgr.Bwrite(pBuf);
			bufMgr.Brelse(pBuf);
		}
		else /* 如果缓冲区未写满 */
		{
			/* 将缓存标记为延迟写，不急于进行I/O操作将字符块输出到磁盘上 */
			bufMgr.Bwrite(pBuf);
			bufMgr.Brelse(pBuf);
		}

		/* 普通文件长度增加 */
		if ((this->i_size < u.u_IOParam.m_Offset) && (this->i_mode & (Inode::IFBLK & Inode::IFCHR)) == 0)
		{
			/* 如果文件长度小于写入位置，则更新文件长度 */
			this->i_size = u.u_IOParam.m_Offset;
		}

		/*
		 * 之前过程中读盘可能导致进程切换，在进程睡眠期间当前内存Inode可能
		 * 被同步到外存Inode，在此需要重新设置更新标志位。
		 * 好像没有必要呀！即使write系统调用没有上锁，iput看到i_count减到0之后才会将内存i节点同步回磁盘。而这在
		 * 文件没有close之前是不会发生的。
		 * 我们的系统对write系统调用上锁就更不可能出现这种情况了。
		 * 真的想把它去掉。
		 */
		this->i_flag |= Inode::IUPD;
	}
}

/* 将文件的逻辑块号转换成对应的物理盘块号 */
int Inode::Bmap(int lbn)
{
	Buf* pFirstBuf;		/* 用于访问一次间接索引表 */
	Buf* pSecondBuf;	/* 用于访问二次间接索引表 */
	int phyBlkno;		/* 转换后的物理盘块号 */
	int* iTable;		/* 用于访问索引盘块中一次间接、两次间接索引表 */
	int index;			/* 用于访问索引盘块中一次间接、两次间接索引表中的索引值 */
	User& u = Kernel::Instance().GetUser();
	BufferManager& bufMgr = Kernel::Instance().GetBufferManager();
	FileSystem& fileSys = Kernel::Instance().GetFileSystem();

	/*
	 * Unix V6++的文件索引结构：(小型、大型和巨型文件)
	 * (1) i_addr[0] - i_addr[5]为直接索引表，文件长度范围是0 - 6个盘块；
	 *
	 * (2) i_addr[6] - i_addr[7]存放一次间接索引表所在磁盘块号，每磁盘块
	 * 上存放128个文件数据盘块号，此类文件长度范围是7 - (128 * 2 + 6)个盘块；
	 *
	 * (3) i_addr[8] - i_addr[9]存放二次间接索引表所在磁盘块号，每个二次间接
	 * 索引表记录128个一次间接索引表所在磁盘块号，此类文件长度范围是
	 * (128 * 2 + 6 ) < size <= (128 * 128 * 2 + 128 * 2 + 6)
	 */

	if (lbn >= Inode::HUGE_FILE_BLOCK)
	{
		u.u_error = User::efbig;
		return 0;
	}
	/* 如果是小型文件，从基本索引表i_addr[0-5]中获得物理盘块号即可 */
	if (lbn < 6)
	{
		phyBlkno = this->i_addr[lbn];	/* 从基本索引表中获得物理盘块号 */

		/*
		 * 如果该逻辑块号还没有相应的物理盘块号与之对应，则分配一个物理块。
		 * 这通常发生在对文件的写入，当写入位置超出文件大小，即对当前
		 * 文件进行扩充写入，就需要分配额外的磁盘块，并为之建立逻辑块号
		 * 与物理盘块号之间的映射。
		 */
		if (phyBlkno == 0 && (pFirstBuf = fileSys.Alloc()) != NULL)
		{
			/*
			 * 因为后面很可能马上还要用到此处新分配的数据块，所以不急于立刻输出到
			 * 磁盘上；而是将缓存标记为延迟写方式，这样可以减少系统的I/O操作。
			 */
			bufMgr.Bdwrite(pFirstBuf);		/* 将新分配的数据块写入磁盘 */
			phyBlkno = pFirstBuf->b_blkno;	/* 获得新分配的数据块的物理盘块号 */
			/* 将逻辑块号lbn映射到物理盘块号phyBlkno */
			this->i_addr[lbn] = phyBlkno;	/* 将新分配的数据块的物理盘块号写入基本索引表 */
			this->i_flag |= Inode::IUPD;	/* 设置更新标志位 */
		}

		return phyBlkno;
	}
	/* lbn >= 6 大型、巨型文件 */
	else
	{
		/* 计算逻辑块号lbn对应i_addr[]中的索引 */

		if (lbn < Inode::LARGE_FILE_BLOCK)	/* 大型文件: 长度介于7 - (128 * 2 + 6)个盘块之间 */
		{
			// 计算索引，计算的时i_addr中的下标
			index = (lbn - Inode::SMALL_FILE_BLOCK) / Inode::ADDRESS_PER_INDEX_BLOCK + 6;
		}
		else	/* 巨型文件: 长度介于263 - (128 * 128 * 2 + 128 * 2 + 6)个盘块之间 */
		{
			// 计算索引
			index = (lbn - Inode::LARGE_FILE_BLOCK) / (Inode::ADDRESS_PER_INDEX_BLOCK * Inode::ADDRESS_PER_INDEX_BLOCK) + 8;
		}
		phyBlkno = this->i_addr[index];

		/* 若该项为零，则表示不存在相应的间接索引表块 */
		if (0 == phyBlkno)
		{
			this->i_flag |= Inode::IUPD;	// 标志位设置已修改
			/* 分配一空闲盘块存放间接索引表 */
			if ((pFirstBuf = fileSys.Alloc()) == NULL)
			{
				return 0;	/* 分配失败 */
			}
			/* i_addr[index]中记录间接索引表的物理盘块号 */
			this->i_addr[index] = pFirstBuf->b_blkno;
		}
		else
		{
			/* 读出存储间接索引表的字符块 */
			pFirstBuf = bufMgr.Bread( phyBlkno);
		}
		/* 获取缓冲区首址 */
		iTable = (int*)pFirstBuf->b_addr;

		if (index >= 8)	/* ASSERT: 8 <= index <= 9 */
		{
			/*
			 * 对于巨型文件的情况，pFirstBuf中是二次间接索引表，
			 * 还需根据逻辑块号，经由二次间接索引表找到一次间接索引表
			 */
			 // 获取索引
			index = ((lbn - Inode::LARGE_FILE_BLOCK) / Inode::ADDRESS_PER_INDEX_BLOCK) % Inode::ADDRESS_PER_INDEX_BLOCK;

			/* iTable指向缓存中的二次间接索引表。该项为零，不存在一次间接索引表 */
			phyBlkno = iTable[index];
			if (0 == phyBlkno)
			{
				/* 如果该一次间接索引表尚未被分配，分配一空闲盘块存放一次间接索引表 */
				if ((pSecondBuf = fileSys.Alloc()) == NULL)
				{
					/* 分配一次间接索引表磁盘块失败，释放缓存中的二次间接索引表，然后返回 */
					bufMgr.Brelse(pFirstBuf);
					return 0;
				}
				/* 将新分配的一次间接索引表磁盘块号，记入二次间接索引表相应项 */
				iTable[index] = pSecondBuf->b_blkno;
				/* 将更改后的二次间接索引表延迟写方式输出到磁盘 */
				bufMgr.Bdwrite(pFirstBuf);
			}
			else
			{
				/* 释放二次间接索引表占用的缓存，并读入一次间接索引表 */
				bufMgr.Brelse(pFirstBuf);
				pSecondBuf = bufMgr.Bread(phyBlkno);
			}

			/* 令pFirstBuf指向一次间接索引表 */
			pFirstBuf = pSecondBuf;
			/* 令iTable指向一次间接索引表 */
			iTable = (int*)pSecondBuf->b_addr;
		}

		if (lbn < Inode::LARGE_FILE_BLOCK)
			index = (lbn - Inode::SMALL_FILE_BLOCK) % Inode::ADDRESS_PER_INDEX_BLOCK;
		else
			index = (lbn - Inode::LARGE_FILE_BLOCK) % Inode::ADDRESS_PER_INDEX_BLOCK;

		if ((phyBlkno = iTable[index]) == 0 && (pSecondBuf = fileSys.Alloc()) != NULL)
		{
			/* 将分配到的文件数据盘块号登记在一次间接索引表中 */
			phyBlkno = pSecondBuf->b_blkno;
			iTable[index] = phyBlkno;

			/* 将数据盘块、更改后的一次间接索引表用延迟写方式输出到磁盘 */
			bufMgr.Bdwrite(pSecondBuf);
			bufMgr.Bdwrite(pFirstBuf);
		}
		else
		{
			/* 释放一次间接索引表占用缓存 */
			bufMgr.Brelse(pFirstBuf);
		}
		
		return phyBlkno;
	}
}

// 用于更新外存Inode的最后的访问时间、修改时间【文件系统，缓存管理器】
void Inode::IUpdate(int time)
{
	Buf* pBuf;			/* 缓存块指针 */
	DiskInode dInode;	/* 磁盘Inode */
	FileSystem& filesys = Kernel::Instance().GetFileSystem();		/* 文件系统 */
	BufferManager& bufMgr = Kernel::Instance().GetBufferManager();	/* 缓存管理器 */

	/* 当IUPD和IACC标志之一被设置，才需要更新相应DiskInode
	 * 目录搜索，不会设置所途径的目录文件的IACC和IUPD标志 */
	if ((this->i_flag & (Inode::IUPD | Inode::IACC)) != 0)
	{
		/* 邓蓉的注释：在缓存池中找到包含本i节点（this->i_number）的缓存块
		 * 这是一个上锁的缓存块，本段代码中的Bwrite()在将缓存块写回磁盘后会释放该缓存块。
		 * 将该存放该DiskInode的字符块读入缓冲区 */
		pBuf = bufMgr.Bread(FileSystem::INODE_ZONE_START_SECTOR + this->i_number / FileSystem::INODE_NUMBER_PER_SECTOR);

		/* 将内存Inode副本中的信息复制到dInode中，然后将dInode覆盖缓存中旧的外存Inode */
		dInode.d_mode = this->i_mode;		/* 文件类型和访问权限 */
		dInode.d_nlink = this->i_nlink;		/* 链接数 */
		dInode.d_uid = this->i_uid;			/* 文件所有者的用户标识符 */
		dInode.d_gid = this->i_gid;			/* 文件所有者的组标识符 */
		dInode.d_size = this->i_size;		/* 文件长度 */
		for (int i = 0; i < 10; i++)
			dInode.d_addr[i] = this->i_addr[i];	/* 文件占用的磁盘块号 */

		if (this->i_flag & Inode::IACC)
		{
			/* 更新最后访问时间 */
			dInode.d_atime = time;
		}
		if (this->i_flag & Inode::IUPD)
		{
			/* 更新最后访问时间 */
			dInode.d_mtime = time;
		}

		/* 将p指向缓存区中旧外存Inode的偏移位置 */
		unsigned char* p = pBuf->b_addr + (this->i_number % FileSystem::INODE_NUMBER_PER_SECTOR) * sizeof(DiskInode);
		DiskInode* pNode = &dInode;
		/* 用dInode中的新数据覆盖缓存中的旧外存Inode */
		memcpy(p, pNode, sizeof(DiskInode));

		/* 将缓存写回至磁盘，达到更新旧外存Inode的目的 */
		bufMgr.Bwrite(pBuf);
	}
}

/* 释放Inode所占用的磁盘块 */
void Inode::ITrunc()
{
	/* 经由磁盘高速缓存读取存放一次间接、两次间接索引表的磁盘块 */
	BufferManager& bm = Kernel::Instance().GetBufferManager();
	/* 获取g_FileSystem对象的引用，执行释放磁盘块的操作 */
	FileSystem& filesys = Kernel::Instance().GetFileSystem();

	/* 如果是字符设备或者块设备则退出 */
	if (this->i_mode & (Inode::IFCHR & Inode::IFBLK))
	{
		return;
	}

	/* 采用FILO方式释放，以尽量使得SuperBlock中记录的空闲盘块号连续。
	 *
	 * Unix V6++的文件索引结构：(小型、大型和巨型文件)
	 * (1) i_addr[0] - i_addr[5]为直接索引表，文件长度范围是0 - 6个盘块；
	 *
	 * (2) i_addr[6] - i_addr[7]存放一次间接索引表所在磁盘块号，每磁盘块
	 * 上存放128个文件数据盘块号，此类文件长度范围是7 - (128 * 2 + 6)个盘块；
	 *
	 * (3) i_addr[8] - i_addr[9]存放二次间接索引表所在磁盘块号，每个二次间接
	 * 索引表记录128个一次间接索引表所在磁盘块号，此类文件长度范围是
	 * (128 * 2 + 6 ) < size <= (128 * 128 * 2 + 128 * 2 + 6)
	 */
	for (int i = 9; i >= 0; i--)		/* 从i_addr[9]到i_addr[0] */
	{
		/* 如果i_addr[]中第i项存在索引 */
		if (this->i_addr[i] != 0)
		{
			/* 如果是i_addr[]中的一次间接、两次间接索引项 */
			if (i >= 6 && i <= 9)
			{
				/* 将间接索引表读入缓存 */
				Buf* pFirstBuf = bm.Bread(this->i_addr[i]);
				/* 获取缓冲区首址 */
				int* pFirst = (int*)pFirstBuf->b_addr;

				/* 每张间接索引表记录 512/sizeof(int) = 128个磁盘块号，遍历这全部128个磁盘块 */
				for (int j = 128 - 1; j >= 0; j--)
				{
					if (pFirst[j] != 0)	/* 如果该项存在索引 */
					{
						/*
						 * 如果是两次间接索引表，i_addr[8]或i_addr[9]项，
						 * 那么该字符块记录的是128个一次间接索引表存放的磁盘块号
						 */
						if (i >= 8 && i <= 9)
						{
							Buf* pSecondBuf = bm.Bread(pFirst[j]);  // 将一次间接索引表读入缓存,通过循环遍历进行释放
							int* pSecond = (int*)pSecondBuf->b_addr;  // 获取缓冲区首址

							for (int k = 128 - 1; k >= 0; k--)
							{
								if (pSecond[k] != 0)
								{
									/* 释放指定的磁盘块 */
									filesys.Free(pSecond[k]);
								}
							}
							/* 缓存使用完毕，释放以便被其它进程使用 */
							bm.Brelse(pSecondBuf);
						}
						//释放磁盘块
						filesys.Free(pFirst[j]);
					}
				}
				//释放磁盘块
				bm.Brelse(pFirstBuf);
			}
			/* 释放索引表本身占用的磁盘块 */
			filesys.Free(this->i_addr[i]);
			/* 0表示该项不包含索引 */
			this->i_addr[i] = 0;
		}
	}
	/* 盘块释放完毕，文件大小清零 */
	this->i_size = 0;
	/* 增设IUPD标志位，表示此内存Inode需要同步到相应外存Inode */
	this->i_flag |= Inode::IUPD;
	/* 清大文件标志 和原来的RWXRWXRWX比特*/
	this->i_mode &= ~(Inode::ILARG & Inode::IRWXU & Inode::IRWXG & Inode::IRWXO);
	this->i_nlink = 1;
}

void Inode::Clean()
{
	/*
	 * Inode::Clean()特定用于IAlloc()中清空新分配DiskInode的原有数据，
	 * 即旧文件信息。Clean()函数中不应当清除i_dev, i_number, i_flag, i_count,
	 * 这是属于内存Inode而非DiskInode包含的旧文件信息，而Inode类构造函数需要
	 * 将其初始化为无效值。
	 */

	this->i_mode = 0;	//清空文件类型和访问权限
	this->i_nlink = 0;	//清空文件链接数
	this->i_uid = -1;	//清空文件所有者
	this->i_gid = -1;	//清空文件所有者组
	this->i_size = 0;	//清空文件大小
	this->i_lastr = -1;	//清空最后一次读取的文件块号
	for (int i = 0; i < 10; i++)
		this->i_addr[i] = 0;	//清空文件数据块号
}

/* 将包含外存Inode字符块的缓存中的Inode信息拷贝到内存Inode中 */
void Inode::ICopy(Buf* bp, int inumber)
{
	DiskInode dInode;  // 临时变量，用于存放外存Inode信息
	DiskInode* pNode = &dInode;	// 指向临时变量dInode

	unsigned char* p = bp->b_addr + (inumber % FileSystem::INODE_NUMBER_PER_SECTOR) * sizeof(DiskInode);
	// 将缓存中外存Inode数据拷贝到临时变量中
	memcpy(pNode, p, sizeof(DiskInode));

	/* 将外存Inode变量dInode中信息复制到内存Inode中 */
	this->i_mode = dInode.d_mode;	//	文件类型和访问权限
	this->i_nlink = dInode.d_nlink;	//	文件链接数
	this->i_uid = dInode.d_uid;		// 文件所有者
	this->i_gid = dInode.d_gid;		// 文件所有者组
	this->i_size = dInode.d_size;	// 文件大小
	for (int i = 0; i < 10; i++)
		this->i_addr[i] = dInode.d_addr[i];	// 文件数据块号
}

/* 解锁Inode */
void Inode::Prele()
{
	/* 解锁pipe或Inode,并且唤醒相应进程 */
	this->i_flag &= ~Inode::ILOCK;
}


DiskInode::DiskInode()
{
	/*
	 * 如果DiskInode没有构造函数，会发生如下较难察觉的错误：
	 * DiskInode作为局部变量占据函数Stack Frame中的内存空间，但是
	 * 这段空间没有被正确初始化，仍旧保留着先前栈内容，由于并不是
	 * DiskInode所有字段都会被更新，将DiskInode写回到磁盘上时，可能
	 * 将先前栈内容一同写回，导致写回结果出现莫名其妙的数据。
	 */
	this->d_mode = 0;	/* 文件类型和访问权限 */
	this->d_nlink = 0;	/* 文件链接数 */
	this->d_uid = -1;	/* 文件所有者 */
	this->d_gid = -1;	/* 文件所有者组 */
	this->d_size = 0;	/* 文件大小 */
	for (int i = 0; i < 10; i++)
		this->d_addr[i] = 0;	/* 文件数据块号 */
	this->d_atime = 0;	/* 文件最后一次访问时间 */
	this->d_mtime = 0;	/* 文件最后一次修改时间 */
}

DiskInode::~DiskInode()
{
	//nothing to do 
}